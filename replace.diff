diff --git a/.gitignore b/.gitignore
index 2fa3ac0..e0ceadc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -24,6 +24,9 @@ local.properties
 
 # Proguard folder generated by Eclipse
 ThePlaceIsRight/proguard/
+google-play-services_lib/bin/google-play-services_lib.jar
+
+google-play-services_lib/bin/google-play-services_lib.jar
 
 google-play-services_lib/.classpath
 
@@ -37,5 +40,6 @@ ThePlaceIsRight/.classpath
 
 ThePlaceIsRight/.classpath
 
+google-play-services_lib/bin/google-play-services_lib.jar
 
 *.jar
diff --git a/ThePlaceIsRight/.classpath b/ThePlaceIsRight/.classpath
index a36ca8b..5176974 100644
--- a/ThePlaceIsRight/.classpath
+++ b/ThePlaceIsRight/.classpath
@@ -5,6 +5,5 @@
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="src" path="/google-play-services_lib"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/ThePlaceIsRight/AndroidManifest.xml b/ThePlaceIsRight/AndroidManifest.xml
index 423bca0..d375d87 100644
--- a/ThePlaceIsRight/AndroidManifest.xml
+++ b/ThePlaceIsRight/AndroidManifest.xml
@@ -60,10 +60,6 @@
             android:name="com.example.theplaceisright.FindConsulateActivity"
             android:label="@string/title_activity_find_consulate" >
         </activity>
-        <activity
-            android:name="com.example.theplaceisright.SplashScreenActivity"
-            android:label="@string/title_activity_splash_screen" >
-        </activity>
     </application>
 
 </manifest>
diff --git a/ThePlaceIsRight/project.properties b/ThePlaceIsRight/project.properties
index 43f71c4..50034e8 100644
--- a/ThePlaceIsRight/project.properties
+++ b/ThePlaceIsRight/project.properties
@@ -14,4 +14,4 @@
 target=android-19
 android.library=false
 android.library.reference.1=../appcompat
-android.library.reference.2=../google-play-services_lib
+android.library.reference.2=../../../../workspace/google-play-services_lib
diff --git a/ThePlaceIsRight/res/layout/activity_main.xml b/ThePlaceIsRight/res/layout/activity_main.xml
index 8927a14..8753cf6 100644
--- a/ThePlaceIsRight/res/layout/activity_main.xml
+++ b/ThePlaceIsRight/res/layout/activity_main.xml
@@ -9,18 +9,16 @@
     tools:context=".MainActivity" >
 
     <Button
-        android:id="@+id/button2"
+        android:id="@+id/button_search"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:hint="@string/button_search"
         android:onClick="search" />
 
     <Button
-        android:id="@+id/button1"
+        android:id="@+id/button_changelocation"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_below="@+id/button2"
-        android:layout_marginTop="18dp"
         android:onClick="changeLocation"
         android:text="@string/button_changelocation" />
 
diff --git a/ThePlaceIsRight/res/values/strings.xml b/ThePlaceIsRight/res/values/strings.xml
index c09c6d5..64d2c69 100644
--- a/ThePlaceIsRight/res/values/strings.xml
+++ b/ThePlaceIsRight/res/values/strings.xml
@@ -14,6 +14,5 @@
     <string name="change_location">Item2</string>
     <string name="title_activity_consulate_query">ConsulateQuery</string>
     <string name="title_activity_find_consulate">FindConsulateActivity</string>
-    <string name="title_activity_splash_screen">SplashScreenActivity</string>
 
 </resources>
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryDBHelper.java b/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryDBHelper.java
index 865ea85..1fe351e 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryDBHelper.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryDBHelper.java
@@ -32,6 +32,11 @@ class AdvisoryDBHelper extends SQLiteOpenHelper {
         db.execSQL(DICTIONARY_TABLE_CREATE);
     }
 
+    @Override
+    public void onOpen(SQLiteDatabase db) {
+        db.execSQL("DROP TABLE IF EXISTS " + DICTIONARY_TABLE_NAME);
+    }
+    
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		// TODO Auto-generated method stub
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryHTMLGetter.java b/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryHTMLGetter.java
new file mode 100644
index 0000000..25090a5
--- /dev/null
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/AdvisoryHTMLGetter.java
@@ -0,0 +1,12 @@
+package com.example.theplaceisright;
+
+public class AdvisoryHTMLGetter extends HTMLGetter{
+
+	  @Override
+	  protected void onPostExecute(String result) {
+	   // execution of result of Long time consuming operation
+		  //DatabaseManager.importAdvisory(AdvisoryDataParser.readData(result));
+	  }
+	
+	
+}
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateDBHelper.java b/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateDBHelper.java
index 978fa1e..9b5eb40 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateDBHelper.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateDBHelper.java
@@ -29,13 +29,13 @@ class ConsulateDBHelper extends SQLiteOpenHelper {
                 KEY_COUNTRY + " TEXT NOT NULL," +
                 KEY_OFFICE + " INTEGER NOT NULL, " +
                 VALUE_CODE + " TEXT NOT NULL," +
-                VALUE_PRIMARY + " INTEGER NOT NULL, " +
-                VALUE_PASSPORT + " INTEGER NOT NULL, " +
-                VALUE_CITY + " TEXT NOT NULL," +
+                VALUE_PRIMARY + " INTEGER, " +
+                VALUE_PASSPORT + " INTEGER, " +
+                VALUE_CITY + " TEXT," +
                 VALUE_TYPE + " TEXT," +
-                VALUE_LAT + " REAL NOT NULL, " +
-                VALUE_LON + " REAL NOT NULL, " +
-                VALUE_ADDRESS + " TEXT NOT NULL," +
+                VALUE_LAT + " REAL, " +
+                VALUE_LON + " REAL, " +
+                VALUE_ADDRESS + " TEXT," +
                 VALUE_TEL + " TEXT," +
                 VALUE_EMERG + " TEXT," +
                 VALUE_FAX + " TEXT," +
@@ -52,6 +52,11 @@ class ConsulateDBHelper extends SQLiteOpenHelper {
         db.execSQL(DICTIONARY_TABLE_CREATE);
     }
 
+    @Override
+    public void onOpen(SQLiteDatabase db) {
+        db.execSQL("DROP TABLE IF EXISTS " + DICTIONARY_TABLE_NAME);
+    }
+
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		// TODO Auto-generated method stub
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateHTMLGetter.java b/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateHTMLGetter.java
index 3179939..269d0ca 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateHTMLGetter.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/ConsulateHTMLGetter.java
@@ -5,7 +5,7 @@ public class ConsulateHTMLGetter extends HTMLGetter{
 	  @Override
 	  protected void onPostExecute(String result) {
 	   // execution of result of Long time consuming operation
-		  ConsulateDataParser.readData(result);
+		  DatabaseManager.importConsulates(ConsulateDataParser.readData(result));
 	  }
 	
 	
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/ContinentCountry.java b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentCountry.java
index 052237a..7687aa0 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/ContinentCountry.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentCountry.java
@@ -5,6 +5,29 @@ public class ContinentCountry {
 	private String continent;
 	private String countryCode3;
 	
+	public static final String[] continentNames = {"Africa","Asia","Europe","North America","South America","Oceania","Antarctica"};
+	private static final String[] continentCodes = {"AF","AS","EU","NA","SA","OC","AN"};
+	
+	
+	public static String continentNameToCode(String name){
+		for (int i = 0; i < continentNames.length; i++)
+		{
+			if (continentNames[i].equals(name))
+				return continentCodes[i];
+		}
+		return null;
+	}
+
+	public static String continentCodeToName(String code){
+		for (int i = 0; i < continentCodes.length; i++)
+		{
+			if (continentCodes[i].equals(code))
+				return continentNames[i];
+		}
+		return null;
+	}
+
+	
 	ContinentCountry(String c2, String con, String c3){
 		countryCode2 = c2;
 		continent = con;
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/ContinentDBHelper.java b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentDBHelper.java
new file mode 100644
index 0000000..cc5b406
--- /dev/null
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentDBHelper.java
@@ -0,0 +1,47 @@
+package com.example.theplaceisright;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+class ContinentDBHelper extends SQLiteOpenHelper {
+
+    private static final int DATABASE_VERSION = 2;
+    static final String DICTIONARY_TABLE_NAME = "continent";
+    static final String KEY_COUNTRY2 = "Country2";
+    static final String VALUE_CONTINENT = "Continent";
+    static final String VALUE_COUNTRY3 = "Country3";
+
+    private static final String DICTIONARY_TABLE_CREATE =
+                "CREATE TABLE " + DICTIONARY_TABLE_NAME + " (" +
+                KEY_COUNTRY2 + " TEXT NOT NULL," +
+                VALUE_CONTINENT + " TEXT NOT NULL," +
+                VALUE_COUNTRY3 + " TEXT," +
+                "PRIMARY KEY ("+ KEY_COUNTRY2 + ")" +
+                ");";
+
+    ContinentDBHelper(Context context) {
+        super(context, DICTIONARY_TABLE_NAME, null, DATABASE_VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL(DICTIONARY_TABLE_CREATE);
+    }
+    
+    @Override
+    public void onOpen(SQLiteDatabase db) {
+        db.execSQL("DROP TABLE IF EXISTS " + DICTIONARY_TABLE_NAME);
+    }
+
+	@Override
+	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+		// TODO Auto-generated method stub
+	    Log.w(AdvisoryDBHelper.class.getName(),
+	            "Upgrading database from version " + oldVersion + " to "
+	                + newVersion + ", which will destroy all old data");
+	        db.execSQL("DROP TABLE IF EXISTS " + DICTIONARY_TABLE_NAME);
+	        onCreate(db);
+	}
+}
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/ContinentHTMLGetter.java b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentHTMLGetter.java
index 215c1c1..3c0a2bd 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/ContinentHTMLGetter.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/ContinentHTMLGetter.java
@@ -5,7 +5,7 @@ public class ContinentHTMLGetter extends HTMLGetter{
 	  @Override
 	  protected void onPostExecute(String result) {
 	   // execution of result of Long time consuming operation
-		  ContinentHTMLParser.parse(result);
+		  DatabaseManager.importContinents(ContinentHTMLParser.parse(result));
 	  }
 
 }
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/DatabaseManager.java b/ThePlaceIsRight/src/com/example/theplaceisright/DatabaseManager.java
index 83025ad..89e3c74 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/DatabaseManager.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/DatabaseManager.java
@@ -7,36 +7,112 @@ import android.content.Context;
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
 
 
 public class DatabaseManager {
 	// TODO: add more databases
-	private SQLiteDatabase consulateDB;
-	private ConsulateDBHelper consulateHelper;
+	private static SQLiteDatabase consulateDB;
+	private static ConsulateDBHelper consulateHelper;
 	
-	private SQLiteDatabase advisoryDB;
-	private AdvisoryDBHelper advisoryHelper;
+	private static SQLiteDatabase advisoryDB;
+	private static AdvisoryDBHelper advisoryHelper;
 
+	private static SQLiteDatabase continentDB;
+	private static ContinentDBHelper continentHelper;
+	
+	private static boolean isInitConsulate = false;
+	private static boolean isInitContinent = false;
+	private static boolean isInitAdvisory = false;
+	
+	private static MainActivity activity;
+	
+	
 	public DatabaseManager(Context context) {
 		consulateHelper = new ConsulateDBHelper(context);
 		advisoryHelper = new AdvisoryDBHelper(context);
+		continentHelper = new ContinentDBHelper(context);
 		open();
 	}
 
 	// TODO: add more database helpers
-	private void open() throws SQLException {
+	private static void open() throws SQLException {
 		consulateDB = consulateHelper.getWritableDatabase();
 		advisoryDB = advisoryHelper.getWritableDatabase();
+		continentDB = continentHelper.getWritableDatabase();
 	}
 
-	public void close() {
+	public static void close() {
 		consulateHelper.close();
+		advisoryDB.close();
+		continentDB.close();
+	}
+	
+	public static void initDatabases(MainActivity act){
+		// note: all databases have overridden onOpen
+		// so to drop table 
+		
+		activity = act;
+		if (!isInitConsulate)
+		{
+			ConsulateDataParser consulateP = new ConsulateDataParser();
+			consulateP.run();
+		}
+		
+		if (!isInitContinent)
+		{
+			ContinentHTMLParser continentP = new ContinentHTMLParser();
+			continentP.run();
+		}
+		
+		if (!isInitAdvisory)
+		{
+			//AdvisoryParser consulateP = new ConsulateDataParser();
+			//consulateP.run();
+		}
+	}
+	
+	private static void checkInit(){
+		if (isInitConsulate && isInitContinent && isInitAdvisory)
+		{
+			// TODO update UI
+		}
+	}
+	
+	public static void importConsulates(ArrayList<Consulate> ins) {
+		for (Consulate c : ins) {
+			insertConsulate(c);
+		}
+		
+		isInitConsulate = true;
+		checkInit();
+	}
+
+	public static void importContinents(ArrayList<ContinentCountry> ins) {
+		for (ContinentCountry c : ins) {
+			insertContinent(c);
+		}
+		
+		isInitContinent = true;
+		checkInit();
 	}
+
+	public static void importAdvisory(ArrayList<Advisory> ins) {
+		for (Advisory a : ins) {
+			insertAdvisory(a);
+		}
+		
+		isInitAdvisory = true;
+		checkInit();
+	}
+
 	
-	public void insertConsulate(Consulate ins) {
+	public static void insertConsulate(Consulate ins) {
+		if (ins == null) return;
 	    ContentValues values = new ContentValues();
 	    values.put(ConsulateDBHelper.KEY_COUNTRY, ins.getCountry());
 	    values.put(ConsulateDBHelper.KEY_OFFICE, ins.getOfficeID());
+	    values.put(ConsulateDBHelper.VALUE_CODE, ins.getCountryCode());
 	    values.put(ConsulateDBHelper.VALUE_PRIMARY, (ins.getIsPrimary()?1:0));
 	    values.put(ConsulateDBHelper.VALUE_PASSPORT, (ins.getHasPassport()?1:0));
 	    values.put(ConsulateDBHelper.VALUE_CITY, ins.getCity());
@@ -48,10 +124,14 @@ public class DatabaseManager {
 	    values.put(ConsulateDBHelper.VALUE_EMERG, ins.getEmergency());
 	    values.put(ConsulateDBHelper.VALUE_FAX, ins.getFax());
 	    values.put(ConsulateDBHelper.VALUE_EMAIL, ins.getEmail());
-	    consulateDB.insert(ConsulateDBHelper.DICTIONARY_TABLE_NAME, null, values);
+	    if (consulateDB.insert(ConsulateDBHelper.DICTIONARY_TABLE_NAME, null, values) < 0) {
+	    	Log.w(DatabaseManager.class.getName(), "Error when inserting new consulate row with " +
+	    			"country = " + ins.getCountry() + ", officeID = " + ins.getOfficeID() + 
+	    			", country code = " + ins.getCountryCode());
+	    }
 	}
 	
-	public ArrayList<Consulate> getConsulates(String country) {
+	public static ArrayList<Consulate> getConsulates(String country) {
 		Cursor c = consulateDB.rawQuery("SELECT * FROM " 
 				+ ConsulateDBHelper.DICTIONARY_TABLE_NAME 
 				+ " WHERE UPPER(" + ConsulateDBHelper.KEY_COUNTRY 
@@ -127,8 +207,22 @@ public class DatabaseManager {
 		
 		return cons;
 	}
+	
+	public static void insertAdvisory(Advisory ins) {
+		if (ins == null) return;
+	    ContentValues values = new ContentValues();
+	    values.put(AdvisoryDBHelper.KEY_COUNTRY, ins.getCountry());
+	    values.put(AdvisoryDBHelper.VALUE_CODE, ins.getCountryCode());
+	    values.put(AdvisoryDBHelper.VALUE_DATE , ins.getDate());
+	    values.put(AdvisoryDBHelper.VALUE_TEXT, ins.getText());
+	    if (advisoryDB.insert(AdvisoryDBHelper.DICTIONARY_TABLE_NAME, null, values) < 0) {
+	    	Log.w(DatabaseManager.class.getName(), "Error when inserting new advisory row with " +
+	    			"country = " + ins.getCountry() + ", country code = " + ins.getCountryCode());
+	    }
+	}
+	
 
-	public Advisory getAdvisory(String country) {
+	public static Advisory getAdvisory(String country) {
 		Cursor c = advisoryDB.rawQuery("SELECT * FROM " 
 				+ AdvisoryDBHelper.DICTIONARY_TABLE_NAME 
 				+ " WHERE UPPER(" + AdvisoryDBHelper.KEY_COUNTRY 
@@ -157,4 +251,40 @@ public class DatabaseManager {
 		return curr;
 
 	}
+	
+	public static void insertContinent(ContinentCountry ins) {
+		if (ins == null) return;
+	    ContentValues values = new ContentValues();
+	    values.put(ContinentDBHelper.KEY_COUNTRY2, ins.getCountryCode2());
+	    values.put(ContinentDBHelper.VALUE_CONTINENT, ins.getContinent());
+	    values.put(ContinentDBHelper.VALUE_COUNTRY3, ins.getCountryCode3());
+	    continentDB.insert(ConsulateDBHelper.DICTIONARY_TABLE_NAME, null, values);
+	}
+	
+	public static ArrayList<String> getCountries(String continentName) {
+		// TODO select for certain columns only?
+		Cursor c = continentDB.rawQuery("SELECT * FROM " 
+				+ ContinentDBHelper.DICTIONARY_TABLE_NAME +  " AS a, "
+				+ ConsulateDBHelper.DICTIONARY_TABLE_NAME +  " AS b, "
+				+ " WHERE "
+				+ "UPPER(a." + ContinentDBHelper.KEY_COUNTRY2 + ") = '" 
+				+ ContinentCountry.continentNameToCode(continentName.trim().toUpperCase()) + "'"
+				+ " AND "
+				+ "a." + ContinentDBHelper.KEY_COUNTRY2 + " = "
+				+ "b." + ConsulateDBHelper.VALUE_CODE 
+				, null);
+		
+		ArrayList<String> countries = new ArrayList<String>();
+		
+		if (!c.moveToFirst()) return countries;
+		do
+		{
+			int idx = c.getColumnIndex(ContinentDBHelper.KEY_COUNTRY2);
+			if (idx >= 0)
+				countries.add(c.getString(idx));
+		} while (c.moveToNext());
+		c.close();
+		
+		return countries;
+	}
 }
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/FindConsulateActivity.java b/ThePlaceIsRight/src/com/example/theplaceisright/FindConsulateActivity.java
index e1a5338..8a025b9 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/FindConsulateActivity.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/FindConsulateActivity.java
@@ -8,8 +8,6 @@ import android.graphics.Color;
 import android.view.Menu;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemSelectedListener;
 import android.widget.ArrayAdapter;
 import android.widget.Spinner;
 import android.widget.SpinnerAdapter;
@@ -20,21 +18,18 @@ public class FindConsulateActivity extends Activity {
 	// Continents
 	 private Spinner dynamicColorSpinner;
 	 private TextView dynamicColorLabel;
-	 private ArrayList<String> options;
-	 ArrayAdapter<String> dataAdapter;
+	 private static ArrayList<String> options;
 	 
 	 //Countries
 	 private Spinner dynamicColorSpinner2;
 	 private TextView dynamicColorLabel2;
-	 private ArrayList<String> options2;
-	 ArrayAdapter<String> dataAdapter2;
-	 
-	 private String item;
+	 private static ArrayList<String> options2;
 	 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_find_consulate);
+		addToDropDownContinent(ContinentCountry.continentNames);
 	}
 
 	@Override
@@ -46,8 +41,8 @@ public class FindConsulateActivity extends Activity {
 		options = new ArrayList<String>();
 		dynamicColorSpinner = (Spinner) findViewById(R.id.continent_spinner);
 		dynamicColorLabel = (TextView) findViewById(R.id.textView1);
-		options.add("Country");
-		dataAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, options);
+		options.add("White");
+		ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, options);
 		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		dynamicColorSpinner.setAdapter(dataAdapter);
 		
@@ -55,54 +50,47 @@ public class FindConsulateActivity extends Activity {
 		options2 = new ArrayList<String>();
 		dynamicColorSpinner2 = (Spinner) findViewById(R.id.country_spinner);
 		dynamicColorLabel2 = (TextView) findViewById(R.id.textView1);
-		options2.add("Continent");
-		dataAdapter2 = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, options2);
+		options2.add("Black");
+		ArrayAdapter<String> dataAdapter2 = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, options2);
 		dataAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		dynamicColorSpinner2.setAdapter(dataAdapter2);
-
+		
+//		ArrayList<String> test = new ArrayList<String>();
+//		test.add("Black");
+//		test.add("Blak");
+//		test.add("Back");
+//		test.add("Bck");
+//		test.add("Blck");
+//		test.add("lck");
+//		test.add("lack");
+//		
+//		addToDropDownContinent(test);
+//		
+//		ArrayList<String> test2 = new ArrayList<String>();
+//		test2.add("Blk");
+//		test2.add("Bl");
+//		test2.add("B");
+//		test2.add("Bck");
+//		test2.add("f");
+//		test2.add("lck");
+//		test2.add("la");
+//		
+//		addToDropDownCountry(test2);
 		
 		return true;
 	}
 	
-	public void addToDropDownCountry(ArrayList<String> itemList){
+	public static void addToDropDownCountry(ArrayList<String> itemList){
 		for(String item : itemList ){
 			  options.add(item);
-			  dynamicColorSpinner.setAdapter(dataAdapter);
 			}
 	}
 	
-	public void addToDropDownContinent(ArrayList<String> itemList){
-		for(String item : itemList ){
-			  options2.add(item);
-			  dynamicColorSpinner2.setAdapter(dataAdapter2);
+	public static void addToDropDownContinent(String[] itemList){
+		for(int i = 0; i < itemList.length; i++){
+			  options2.add(itemList[i]);
 			}
-		
-	setUpListeners();
-}
-	
-	
-private void setUpListeners() {
-		options.add("entre");
-		dynamicColorSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {
-
-			@Override
-			public void onItemSelected(AdapterView<?> parent, View view,
-					int pos, long id) {
-				String color = parent.getItemAtPosition(pos).toString();
-				options.add(color);
-				dynamicColorSpinner.setAdapter(dataAdapter);
-				
-			}
-			@Override
-			public void onNothingSelected(AdapterView<?> arg0) {
-				// TODO Auto-generated method stub
-				
-			}
-			
-		});
-		
 	}
-
 	
 
 
diff --git a/ThePlaceIsRight/src/com/example/theplaceisright/MainActivity.java b/ThePlaceIsRight/src/com/example/theplaceisright/MainActivity.java
index a3c21e6..357d15a 100644
--- a/ThePlaceIsRight/src/com/example/theplaceisright/MainActivity.java
+++ b/ThePlaceIsRight/src/com/example/theplaceisright/MainActivity.java
@@ -1,5 +1,7 @@
 package com.example.theplaceisright;
 
+import com.google.android.gms.maps.GoogleMap;
+
 import android.os.Bundle;
 import android.app.Activity;
 import android.content.Intent;
@@ -10,11 +12,20 @@ import android.view.View;
 public class MainActivity extends Activity {
 	
 	//private GoogleMap map;
+	private static DatabaseManager DBManager;
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_main);
+		DBManager = new DatabaseManager(this);
+		DatabaseManager.initDatabases(this);
+	}
+	
+	@Override
+	protected void onStop(){
+		super.onStop();
+		DatabaseManager.close();
 	}
 
 	@Override
diff --git a/google-play-services_lib/bin/jarlist.cache b/google-play-services_lib/bin/jarlist.cache
new file mode 100644
index 0000000..0565465
--- /dev/null
+++ b/google-play-services_lib/bin/jarlist.cache
@@ -0,0 +1,3 @@
+# cache for current jar dependency. DO NOT EDIT.
+# format is <lastModified> <length> <SHA-1> <path>
+# Encoding is UTF-8
